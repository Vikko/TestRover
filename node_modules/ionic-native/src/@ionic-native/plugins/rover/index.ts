/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Add this file to /src/index.ts (follow style of other plugins)
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';
// import { Plugin, Cordova, CordovaProperty, CordovaInstance, InstanceProperty, IonicNativePlugin } from '@ionic-native/core';
// import { Observable } from 'rxjs/Observable';

/**
 * @name Sport Rover Plugin
 * @description
 * Wrapper to call the Cordova SportRoverPlugin from Ionic
 *
 * @usage
 * ```typescript
 * import { SportRoverPlugin } from '@ionic-native/sport-rover-plugin';
 *
 *
 * constructor(private sportRoverPlugin: SportRoverPlugin) { }
 *
 * ...
 *
 * ```
 */
@Plugin({
  pluginName: 'Rover',
  plugin: 'cordova-plugin-rover', // npm package name, example: cordova-plugin-camera
  pluginRef: 'Rover', // the variable reference to call the plugin, example: navigator.geolocation
  platforms: ['Android'] // Array of platforms supported, example: ['Android', 'iOS']
})
@Injectable()
export class Rover extends IonicNativePlugin {

  /**
   * Start the GPS tracking
   * <@param arg1 {string} Some param to configure something>
   * @return {Promise<any>} Returns a promise when succesful.
   */
  @Cordova()
  startTracking(): Promise<any> {
    return; // We add return; here to avoid any IDE / Compiler errors
  }

  /**
   * Stop the GPS tracking
   * @return {Promise<any>} Returns a promise when succesful.
   */
  @Cordova()
  stopTracking(): Promise<any> {
    return; // We add return; here to avoid any IDE / Compiler errors
  }

}
